// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.beayoscar.babynames.web;

import com.beayoscar.babynames.domain.Gender;
import com.beayoscar.babynames.domain.Name;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect NameController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String NameController.create(@Valid Name name, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("name", name);
            return "names/create";
        }
        uiModel.asMap().clear();
        name.persist();
        return "redirect:/names/" + encodeUrlPathSegment(name.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String NameController.createForm(Model uiModel) {
        uiModel.addAttribute("name", new Name());
        return "names/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String NameController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("name", Name.findName(id));
        uiModel.addAttribute("itemId", id);
        return "names/show";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String NameController.update(@Valid Name name, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("name", name);
            return "names/update";
        }
        uiModel.asMap().clear();
        name.merge();
        return "redirect:/names/" + encodeUrlPathSegment(name.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String NameController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("name", Name.findName(id));
        return "names/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String NameController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Name.findName(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/names";
    }
    
    @ModelAttribute("genders")
    public Collection<Gender> NameController.populateGenders() {
        return Arrays.asList(Gender.class.getEnumConstants());
    }
    
    String NameController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
